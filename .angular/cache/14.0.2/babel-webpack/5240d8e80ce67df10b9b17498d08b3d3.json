{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/material/core\";\nimport * as i6 from \"@angular/material/input\";\n\nfunction AutocompleteComponent_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r2, \" \");\n  }\n}\n/**\n * @title Filter autocomplete\n */\n\n\nexport class AutocompleteComponent {\n  constructor() {\n    this.myControl = new FormControl('');\n    this.options = ['One', 'Two', 'Three'];\n  }\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => this._filter(value || '')));\n  }\n\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n\n}\n\nAutocompleteComponent.ɵfac = function AutocompleteComponent_Factory(t) {\n  return new (t || AutocompleteComponent)();\n};\n\nAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AutocompleteComponent,\n  selectors: [[\"app-autocomplete\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[1, \"example-form\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [\"type\", \"text\", \"placeholder\", \"Pick one\", \"aria-label\", \"Number\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function AutocompleteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\n      i0.ɵɵtext(3, \"Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(7, AutocompleteComponent_mat_option_7_Template, 2, 2, \"mat-option\", 4);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.filteredOptions));\n    }\n  },\n  dependencies: [i1.NgForOf, i2.MatFormField, i2.MatLabel, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgForm, i3.FormControlDirective, i4.MatAutocomplete, i4.MatAutocompleteTrigger, i5.MatOption, i6.MatInput, i1.AsyncPipe],\n  styles: [\".cities-form[_ngcontent-%COMP%] {\\n  color: black;\\n  border: 1 solid black;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dG9jb21wbGV0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxxQkFBQTtBQUNGIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jaXRpZXMtZm9ybSB7XG4gIGNvbG9yOiBibGFjaztcbiAgYm9yZGVyOiAxIHNvbGlkIGJsYWNrO1xufVxuIl19 */\"]\n});","map":{"version":3,"mappings":"AA+DA,SAASA,WAAT,QAA4B,gBAA5B;AAEA,SAASC,GAAT,EAAcC,SAAd,QAA+B,gBAA/B;;;;;;;;;;;IC7BMC;IAIEA;IACFA;;;;;IAHEA;IAEAA;IAAAA;;;AD2BR;;;;;AAQA,OAAM,MAAOC,qBAAP,CAA4B;EALlCC;IAME,iBAAY,IAAIL,WAAJ,CAAgB,EAAhB,CAAZ;IACA,eAAoB,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAApB;EAiBD;;EAdCM,QAAQ;IACN,KAAKC,eAAL,GAAuB,KAAKC,SAAL,CAAeC,YAAf,CAA4BC,IAA5B,CACrBR,SAAS,CAAC,EAAD,CADY,EAErBD,GAAG,CAAEU,KAAD,IAAW,KAAKC,OAAL,CAAaD,KAAK,IAAI,EAAtB,CAAZ,CAFkB,CAAvB;EAID;;EAEOC,OAAO,CAACD,KAAD,EAAc;IAC3B,MAAME,WAAW,GAAGF,KAAK,CAACG,WAAN,EAApB;IAEA,OAAO,KAAKC,OAAL,CAAaC,MAAb,CAAqBC,MAAD,IACzBA,MAAM,CAACH,WAAP,GAAqBI,QAArB,CAA8BL,WAA9B,CADK,CAAP;EAGD;;AAlB+B;;;mBAArBT;AAAqB;;;QAArBA;EAAqBe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCnDlCpB,gCAA2B,CAA3B,EAA2B,gBAA3B,EAA2B,CAA3B,EAA2B,CAA3B,EAA2B,WAA3B;MAEeA;MAAMA;MACjBA;MAQAA;MACEA;;MAMFA;;;;;;MAVEA;MAAAA,4CAAyB,iBAAzB,EAAyBqB,GAAzB;MAKqBrB;MAAAA","names":["FormControl","map","startWith","i0","AutocompleteComponent","constructor","ngOnInit","filteredOptions","myControl","valueChanges","pipe","value","_filter","filterValue","toLowerCase","options","filter","option","includes","selectors","decls","vars","consts","template","_r0"],"sourceRoot":"","sources":["/Users/matteolai/Desktop/flight-schedules/src/app/components/data-grid/autocomplete/autocomplete.component.ts","/Users/matteolai/Desktop/flight-schedules/src/app/components/data-grid/autocomplete/autocomplete.component.html"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { FormControl } from '@angular/forms';\n// import { Observable } from 'rxjs';\n// import { startWith, map } from 'rxjs/operators';\n// import { IFlight } from 'src/app/models/flight.interface';\n// import { DataService } from '../../../data.service';\n\n// @Component({\n//   selector: 'app-autocomplete',\n//   templateUrl: './autocomplete.component.html',\n//   styleUrls: ['./autocomplete.component.scss'],\n// })\n// export class AutocompleteComponent implements OnInit {\n//   public data: IFlight[] = [];\n\n//   searchTerm = new FormControl();\n//   registrations: string[] = [];\n\n//   registrations: string[] = ['ciao', 'come', 'stai'];\n//   cities: string[] = ['ciao', 'come', 'stai'];\n\n//   filteredRegistrations!: Observable<string[]>;\n\n//   constructor(private service: DataService) {}\n\n//   ngOnInit(): void {\n//     // this.getData();\n//     this.filteredRegistrations = this.searchTerm.valueChanges.pipe(\n//       startWith(''),\n//       map((value) => this.filterSearch(value))\n//     );\n//   }\n\n//   private filterSearch(value: string): string[] {\n//     const filterValue = value.toLowerCase();\n//     return this.cities.filter((city) =>\n//       city.toLocaleLowerCase().includes(filterValue)\n//     );\n//   }\n\n//   getData() {\n//     this.service.getRegistrations().subscribe((d) => {\n//       this.registrations = d.split('\\n');\n//       console.log(this.registrations);\n//       for (let index = 1; index < list.length - 1; index++) {\n//         let row = list[index].split(',');\n//         console.log(row);\n//         this.data.push(\n//           new IFlight(\n//             parseInt(row[0], 10),\n//             row[1],\n//             row[2],\n//             row[3],\n//             row[4].trim()\n//           )\n//         );\n//       }\n//       console.log(this.data);\n//     });\n//   }\n// }\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n/**\n * @title Filter autocomplete\n */\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n})\nexport class AutocompleteComponent implements OnInit {\n  myControl = new FormControl('');\n  options: string[] = ['One', 'Two', 'Three'];\n  filteredOptions!: Observable<string[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((value) => this._filter(value || ''))\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter((option) =>\n      option.toLowerCase().includes(filterValue)\n    );\n  }\n}\n","<!-- <form\n  class=\"cities-form\"\n  style=\"display: block; margin-top: 100px; text-align: center\"\n>\n  <mat-form-field>\n    <mat-label>City</mat-label>\n    <input\n      type=\"text\"\n      placeholder=\"Pick One\"\n      aria-label=\"Select a registration\"\n      matInput\n      [formControl]=\"searchTerm\"\n      [autocomplete]=\"auto\"\n    />\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n      <mat-option\n        *ngFor=\"let city of filteredRegistrations | async\"\n        [value]=\"city\"\n        >{{ city }}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form> -->\n\n<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Number</mat-label>\n    <input\n      type=\"text\"\n      placeholder=\"Pick one\"\n      aria-label=\"Number\"\n      matInput\n      [formControl]=\"myControl\"\n      [matAutocomplete]=\"auto\"\n    />\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option\n        *ngFor=\"let option of filteredOptions | async\"\n        [value]=\"option\"\n      >\n        {{ option }}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n"]},"metadata":{},"sourceType":"module"}