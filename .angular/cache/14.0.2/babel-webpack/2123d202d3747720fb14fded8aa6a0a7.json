{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { startWith, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../data.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/input\";\n\nfunction AutocompleteComponent_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const city_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", city_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", city_r2, \" \");\n  }\n}\n\nexport class AutocompleteComponent {\n  constructor(service) {\n    this.service = service; // public data: IFlight[] = [];\n\n    this.searchTerm = new FormControl(); // registrations: string[] = [];\n    // registrations: string[] = ['ciao', 'come', 'stai'];\n\n    this.cities = ['ciao', 'come', 'stai'];\n  }\n\n  ngOnInit() {\n    // this.getData();\n    this.filteredRegistrations = this.searchTerm.valueChanges.pipe(startWith(''), map(value => this.filterSearch(value)));\n  }\n\n  filterSearch(value) {\n    const filterValue = value.toLowerCase();\n    return this.cities.filter(city => city.toLocaleLowerCase().includes(filterValue));\n  }\n\n}\n\nAutocompleteComponent.ɵfac = function AutocompleteComponent_Factory(t) {\n  return new (t || AutocompleteComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n};\n\nAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AutocompleteComponent,\n  selectors: [[\"app-autocomplete\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[1, \"cities-form\", 2, \"display\", \"block\", \"margin-top\", \"100px\", \"text-align\", \"center\"], [\"type\", \"text\", \"placeholder\", \"Pick One\", \"aria-label\", \"Select a registration\", \"matInput\", \"\", 3, \"formControl\", \"autocomplete\"], [\"autoActiveFirstOption\", \"\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function AutocompleteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\")(2, \"mat-label\");\n      i0.ɵɵtext(3, \"City\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 1);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", 2, 3);\n      i0.ɵɵtemplate(7, AutocompleteComponent_mat_option_7_Template, 2, 2, \"mat-option\", 4);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.searchTerm)(\"autocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.filteredRegistrations));\n    }\n  },\n  dependencies: [i2.NgForOf, i3.MatFormField, i3.MatLabel, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgForm, i4.FormControlDirective, i5.MatAutocomplete, i6.MatOption, i7.MatInput, i2.AsyncPipe],\n  styles: [\".cities-form[_ngcontent-%COMP%] {\\n  color: black;\\n  border: 1 solid black;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dG9jb21wbGV0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxxQkFBQTtBQUNGIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jaXRpZXMtZm9ybSB7XG4gIGNvbG9yOiBibGFjaztcbiAgYm9yZGVyOiAxIHNvbGlkIGJsYWNrO1xufVxuIl19 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,gBAA5B;AAEA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;;;;;;;;;;;;ICYMC;IAGGA;IACHA;;;;;IAFEA;IACCA;IAAAA;;;;ADNT,OAAM,MAAOC,qBAAP,CAA4B;EAWhCC,YAAoBC,OAApB,EAAwC;IAApB,uBAAoB,CAVxC;;IAEA,kBAAa,IAAIN,WAAJ,EAAb,CAQwC,CAPxC;IAEA;;IACA,cAAmB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAAnB;EAI4C;;EAE5CO,QAAQ;IACN;IACA,KAAKC,qBAAL,GAA6B,KAAKC,UAAL,CAAgBC,YAAhB,CAA6BC,IAA7B,CAC3BV,SAAS,CAAC,EAAD,CADkB,EAE3BC,GAAG,CAAEU,KAAD,IAAW,KAAKC,YAAL,CAAkBD,KAAlB,CAAZ,CAFwB,CAA7B;EAID;;EAEOC,YAAY,CAACD,KAAD,EAAc;IAChC,MAAME,WAAW,GAAGF,KAAK,CAACG,WAAN,EAApB;IACA,OAAO,KAAKC,MAAL,CAAYC,MAAZ,CAAoBC,IAAD,IACxBA,IAAI,CAACC,iBAAL,GAAyBC,QAAzB,CAAkCN,WAAlC,CADK,CAAP;EAGD;;AA1B+B;;;mBAArBV,uBAAqBD;AAAA;;;QAArBC;EAAqBiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZlCtB,gCAGC,CAHD,EAGC,gBAHD,EAGC,CAHD,EAGC,WAHD;MAKeA;MAAIA;MACfA;MAQAA;MACEA;;MAKFA;;;;;;MATEA;MAAAA,6CAA0B,cAA1B,EAA0BuB,GAA1B;MAKmBvB;MAAAA","names":["FormControl","startWith","map","i0","AutocompleteComponent","constructor","service","ngOnInit","filteredRegistrations","searchTerm","valueChanges","pipe","value","filterSearch","filterValue","toLowerCase","cities","filter","city","toLocaleLowerCase","includes","selectors","decls","vars","consts","template","_r0"],"sourceRoot":"","sources":["/Users/matteolai/Desktop/flight-schedules/src/app/components/data-grid/autocomplete/autocomplete.component.ts","/Users/matteolai/Desktop/flight-schedules/src/app/components/data-grid/autocomplete/autocomplete.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\nimport { IFlight } from 'src/app/models/flight.interface';\nimport { DataService } from '../../../data.service';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n})\nexport class AutocompleteComponent implements OnInit {\n  // public data: IFlight[] = [];\n\n  searchTerm = new FormControl();\n  // registrations: string[] = [];\n\n  // registrations: string[] = ['ciao', 'come', 'stai'];\n  cities: string[] = ['ciao', 'come', 'stai'];\n\n  filteredRegistrations!: Observable<string[]>;\n\n  constructor(private service: DataService) {}\n\n  ngOnInit(): void {\n    // this.getData();\n    this.filteredRegistrations = this.searchTerm.valueChanges.pipe(\n      startWith(''),\n      map((value) => this.filterSearch(value))\n    );\n  }\n\n  private filterSearch(value: string): string[] {\n    const filterValue = value.toLowerCase();\n    return this.cities.filter((city) =>\n      city.toLocaleLowerCase().includes(filterValue)\n    );\n  }\n\n  // getData() {\n  //   this.service.getRegistrations().subscribe((d) => {\n  //     this.registrations = d.split('\\n');\n  //     console.log(this.registrations);\n  //     for (let index = 1; index < list.length - 1; index++) {\n  //       let row = list[index].split(',');\n  //       console.log(row);\n  //       this.data.push(\n  //         new IFlight(\n  //           parseInt(row[0], 10),\n  //           row[1],\n  //           row[2],\n  //           row[3],\n  //           row[4].trim()\n  //         )\n  //       );\n  //     }\n  //     console.log(this.data);\n  //   });\n  // }\n}\n","<form\n  class=\"cities-form\"\n  style=\"display: block; margin-top: 100px; text-align: center\"\n>\n  <mat-form-field>\n    <mat-label>City</mat-label>\n    <input\n      type=\"text\"\n      placeholder=\"Pick One\"\n      aria-label=\"Select a registration\"\n      matInput\n      [formControl]=\"searchTerm\"\n      [autocomplete]=\"auto\"\n    />\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n      <mat-option\n        *ngFor=\"let city of filteredRegistrations | async\"\n        [value]=\"city\"\n        >{{ city }}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n"]},"metadata":{},"sourceType":"module"}